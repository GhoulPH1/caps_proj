import { Client, FleekFunction as OriginalFleekFunction, FleekFunctionDeployment, FleekFunctionDeploymentGenqlSelection, FleekFunctionStatus } from '@fleek-platform/utils-genql-client';
type FunctionsClientOptions = {
    graphqlClient: Client;
};
export type FleekFunction = Omit<OriginalFleekFunction, 'projectId' | 'site'>;
export type GetFleekFunctionArgs = {
    name: string;
};
export type CreateFleekFunctionArgs = {
    name: string;
    siteId?: string;
};
export type DeleteFleekFunctionArgs = {
    id: string;
};
export type UpdateFleekFunctionArgs = {
    id: string;
    name?: string;
    slug?: string;
    status?: FleekFunctionStatus;
};
export type DeployFleekFunctionArgs = {
    functionId: string;
    cid: string;
    sgx?: boolean;
    blake3Hash?: string;
    assetsCid?: string;
};
export type ListFleekFunctionArgs = {
    functionId: string;
};
export declare class FunctionsClient {
    private graphqlClient;
    private static Deployment_MAPPED_PROPERTIES;
    private static FleekFunction_MAPPED_PROPERTIES;
    constructor(options: FunctionsClientOptions);
    get: ({ name }: GetFleekFunctionArgs) => Promise<FleekFunction>;
    list: () => Promise<FleekFunction[]>;
    listDeployments: ({ functionId }: ListFleekFunctionArgs) => Promise<FleekFunctionDeployment[]>;
    create: ({ name, siteId }: CreateFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/utils-genql-client").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/utils-genql-client").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            assetsCid: string | null;
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            siteDeploymentId: string | null;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "assetsCid" | "fleekFunctionId" | "siteDeploymentId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        site: import("@fleek-platform/utils-genql-client").FieldsSelection<import("@fleek-platform/utils-genql-client").Site | null, import("@fleek-platform/utils-genql-client").SiteGenqlSelection | undefined>;
        siteId: import("@fleek-platform/utils-genql-client").FieldsSelection<string | null, number | boolean | undefined>;
        slug: string;
        status: import("@fleek-platform/utils-genql-client").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "site" | "siteId" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
    deploy: ({ functionId, cid, sgx, blake3Hash, assetsCid }: DeployFleekFunctionArgs) => Promise<FleekFunctionDeployment>;
    delete: ({ id }: DeleteFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/utils-genql-client").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/utils-genql-client").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            assetsCid: string | null;
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            siteDeploymentId: string | null;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "assetsCid" | "fleekFunctionId" | "siteDeploymentId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        site: import("@fleek-platform/utils-genql-client").FieldsSelection<import("@fleek-platform/utils-genql-client").Site | null, import("@fleek-platform/utils-genql-client").SiteGenqlSelection | undefined>;
        siteId: import("@fleek-platform/utils-genql-client").FieldsSelection<string | null, number | boolean | undefined>;
        slug: string;
        status: import("@fleek-platform/utils-genql-client").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "site" | "siteId" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
    update: ({ id, slug, name, status }: UpdateFleekFunctionArgs) => Promise<Pick<{
        createdAt: any;
        currentDeployment: import("@fleek-platform/utils-genql-client").FieldsSelection<FleekFunctionDeployment | null, FleekFunctionDeploymentGenqlSelection | undefined>;
        currentDeploymentId: import("@fleek-platform/utils-genql-client").FieldsSelection<string | null, number | boolean | undefined>;
        deployments: Pick<{
            assetsCid: string | null;
            blake3Hash: string | null;
            cid: string;
            createdAt: any;
            fleekFunctionId: string;
            id: string;
            projectId: string;
            sgx: boolean;
            siteDeploymentId: string | null;
            updatedAt: any;
            __typename: "FleekFunctionDeployment";
        }, "__typename" | "createdAt" | "id" | "updatedAt" | "cid" | "projectId" | "sgx" | "blake3Hash" | "assetsCid" | "fleekFunctionId" | "siteDeploymentId">[];
        id: string;
        invokeUrl: string;
        name: string;
        projectId: string;
        site: import("@fleek-platform/utils-genql-client").FieldsSelection<import("@fleek-platform/utils-genql-client").Site | null, import("@fleek-platform/utils-genql-client").SiteGenqlSelection | undefined>;
        siteId: import("@fleek-platform/utils-genql-client").FieldsSelection<string | null, number | boolean | undefined>;
        slug: string;
        status: import("@fleek-platform/utils-genql-client").FieldsSelection<FleekFunctionStatus, number | boolean | undefined>;
        updatedAt: any;
        __typename: "FleekFunction";
    }, "__typename" | "createdAt" | "id" | "name" | "updatedAt" | "deployments" | "site" | "siteId" | "slug" | "status" | "currentDeployment" | "projectId" | "currentDeploymentId" | "invokeUrl">>;
}
export {};
